% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpLearnerPredictions.R
\name{mlr_pipeops_learner_predictions}
\alias{mlr_pipeops_learner_predictions}
\alias{PipeOpLearnerPredictions}
\title{Wrap a Learner into a PipeOp with which returns a task with the predictions as new target.}
\format{
\code{\link{R6Class}} object inheriting from \code{\link[mlr3pipelines:PipeOpTaskPreproc]{PipeOpTaskPreproc}}/\code{\link[mlr3pipelines:PipeOp]{PipeOp}}.
}
\description{
Wraps an \code{\link[mlr3:Learner]{mlr3::Learner}} into a \code{\link{PipeOp}}.

Returns a \code{\link[mlr3:Task]{Task}} where the original target is replaced by the response obtained on the training set during training.

Inherits the \verb{$param_set} (and therefore \verb{$param_set$values}) from the \code{\link[mlr3:Learner]{Learner}} it is constructed from.

\code{\link{PipeOpLearnerPredictions}} can be used to create "destillation" \code{\link{Graph}}s that use the output of one \code{\link[mlr3:Learner]{Learner}}
as new target for another \code{\link[mlr3:Learner]{Learner}}.
}
\section{Construction}{
\preformatted{PipeOpLearnerPredictions$new(learner, id = NULL, param_vals = list())
}
\itemize{
\item \code{learner} :: \code{\link[mlr3:Learner]{Learner}} \cr
\code{\link[mlr3:Learner]{Learner}} to use for training, or a string identifying a
\code{\link[mlr3:Learner]{Learner}} in the \code{\link[mlr3:mlr_learners]{mlr3::mlr_learners}} \code{\link[mlr3misc:Dictionary]{Dictionary}}.
This argument is always cloned; to access the \code{\link[mlr3:Learner]{Learner}} inside \code{PipeOpLearnerPredictions} by-reference, use \verb{$learner}.\cr
\item \code{id} :: \code{character(1)}
Identifier of the resulting object, internally defaulting to the \code{id} of the \code{\link[mlr3:Learner]{Learner}} being wrapped.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

\code{\link{PipeOpLearnerPredictions}} has one input channel named \code{"input"}, taking a \code{\link[mlr3:Task]{Task}} specific to the \code{\link[mlr3:Learner]{Learner}}
type given to \code{learner} during construction; both during training and prediction.

\code{\link{PipeOpLearnerPredictions}} has one output channel named \code{"output"}, producing a \code{\link[mlr3:Task]{Task}} specific to the \code{\link[mlr3:Learner]{Learner}}
type given to \code{learner} during construction; both during training and prediction.

The output is a task with the same features, with the original target replaced by predictions made by the \code{\link[mlr3:Learner]{Learner}}.
During training, this prediction is the response based on the training set.
}

\section{State}{

The \verb{$state} is set to the \verb{$state} slot of the \code{\link[mlr3:Learner]{Learner}} object, together with the \verb{$state} elements inherited from the
\code{\link[mlr3pipelines:PipeOpTaskPreproc]{PipeOpTaskPreproc}}. It is a named \code{list} with the inherited members, as well as:
\itemize{
\item \code{model} :: \code{any}\cr
Model created by the \code{\link[mlr3:Learner]{Learner}}'s \verb{$.train()} function.
\item \code{train_log} :: \code{\link{data.table}} with columns \code{class} (\code{character}), \code{msg} (\code{character})\cr
Errors logged during training.
\item \code{train_time} :: \code{numeric(1)}\cr
Training time, in seconds.
\item \code{predict_log} :: \code{NULL} | \code{\link{data.table}} with columns \code{class} (\code{character}), \code{msg} (\code{character})\cr
Errors logged during prediction.
\item \code{predict_time} :: \code{NULL} | \code{numeric(1)}
Prediction time, in seconds.
}
}

\section{Parameters}{

The parameters are the parameters inherited from the \code{\link[mlr3pipelines:PipeOpTaskPreproc]{PipeOpTaskPreproc}}, as well as the parameters of the \code{\link[mlr3:Learner]{Learner}} wrapped by this object.
}

\section{Internals}{

The \verb{$state} is currently not updated by prediction, so the \verb{$state$predict_log} and \verb{$state$predict_time} will always be \code{NULL}.
}

\section{Fields}{

Fields inherited from \code{\link{PipeOp}}, as well as:
\itemize{
\item \code{learner} :: \code{\link[mlr3:Learner]{Learner}}\cr
\code{\link[mlr3:Learner]{Learner}} that is being wrapped. Read-only.
\item \code{learner_model} :: \code{\link[mlr3:Learner]{Learner}}\cr
\code{\link[mlr3:Learner]{Learner}} that is being wrapped. This learner contains the model if the \code{PipeOp} is trained. Read-only.
}
}

\section{Methods}{

Methods inherited from \code{\link[mlr3pipelines:PipeOpTaskPreproc]{PipeOpTaskPreproc}}/\code{\link[mlr3pipelines:PipeOp]{PipeOp}}.
}

\examples{
library("mlr3")
library("mlr3pipelines")

task = tsk("iris")
learner = lrn("classif.rpart")

lrnpred_po = po("learner_predictions", learner)

lrnpred_po$train(list(task))
}
\seealso{
https://mlr3book.mlr-org.com/list-pipeops.html
}
\concept{Meta PipeOps}
\concept{Pipeops}
